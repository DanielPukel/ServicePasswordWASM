@page "/"
@attribute [AllowAnonymous]
@using AuthentificationTEsting.WASP.Stores;
@using Firebase.Auth;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager NavigationManager
@inject FirebaseAuthProvider _fireBaseAuthProvider
@inject AuthentificationStore _authentificationStore
@inject IJSRuntime _jsRuntime

<PageTitle>Index</PageTitle>
<div class="col text-center m-3">
	<h1 class="">Login</h1>
</div>
<div class="h-100">
	<EditForm Model="@user" OnValidSubmit="SendData">
		<DataAnnotationsValidator />
		<div class="form-group">
			<label for="email">Email address</label>
			<input type="email" class="form-control" id="emailInput" aria-describedby="Insert your email" placeholder="Insert your email" @bind-value="user.email" />
			<ValidationMessage For="@(() => user.email)" />
		</div>
		<div class="form-group mt-2">
			<label for="password">Password</label>
			<input type="password" class="form-control" id="passwordInput" aria-describedby="Insert your password" placeholder="Insert your password" @bind-value="user.password" />
			<ValidationMessage For="@(() => user.password)" />
		</div>
		<div class="col text-center mt-3">
			<button type="submit" class="btn btn-outline-primary">Login</button>
		</div>
	</EditForm>
	<div class="col text-center mt-3">
		<button type="button" class="btn btn-outline-secondary" @onclick="NavigateToRegistration">Not Registered ?</button>
	</div>
	@if (authorization)
	{
		<div class="alert alert-success">
			<strong>Success!</strong>Login successfully
		</div>
	}
</div>
@code {
	private ServicePassword.BlazorWebAssembly.Models.UserObjectLogin user = new();
	public bool authorization = false;

	public async Task SendData(object? param)
	{
		try
		{
			if (await _authentificationStore.Login(user.email, user.password))
			{
				authorization = true;
				StateHasChanged();
				await Alert("/login", "Login successfull!");
			}
			else
			{
				await Alert("/", "The email and password are incorrect!");
			}

		}
		catch (Exception ex)
		{
			await Alert("/", "Server problem!\n Try again later!");
			throw ex;
		}
	}
	public void NavigateToRegistration()
	{
		NavigationManager.NavigateTo("/registration");
	}
	private async Task Alert(string navigateTo, string message = default, bool forceload = false)
	{
		await Task.Delay(500);
		NavigationManager.NavigateTo(navigateTo, forceload);
		await _jsRuntime.InvokeVoidAsync("alert", message);
	}
	//private async Task AlertNotRefresh(string message, string navigateTo)
	//{
	//	await Task.Delay(500);
	//	NavigationManager.NavigateTo(navigateTo);
	//}
}
