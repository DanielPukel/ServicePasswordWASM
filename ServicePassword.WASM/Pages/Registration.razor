@page "/registration"
@attribute [AllowAnonymous]
@using AuthentificationTEsting.WASP.Stores;
@using Firebase.Auth;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager NavigationManager
@inject FirebaseAuthProvider _fireBaseAuthProvider
@inject AuthentificationStore _authentificationStore
@inject IJSRuntime _jsRuntime

<PageTitle>Registration</PageTitle>
<div class="col text-center m-3">
	<h1 class="">Registration</h1>
</div>
<div class="h-100">
	<EditForm Model="@user" OnValidSubmit="Send">
		<DataAnnotationsValidator />
		<div class="form-group">
			<label for="email">Username</label>
			<input type="text" class="form-control" id="usernameInput" aria-describedby="Insert your username" placeholder="Insert your username" @bind-value="user.username" />
			<ValidationMessage For="@(() => user.username)" />
		</div>
		<div class="form-group mt-2">
			<label for="email">Email address</label>
			<input type="email" class="form-control" id="emailInput" aria-describedby="Insert your email" placeholder="Insert your email" @bind-value="user.email" />
			<ValidationMessage For="@(() => user.email)" />
		</div>
		<div class="form-group mt-2">
			<label for="password">Password</label>
			<input type="password" class="form-control" id="passwordInput" aria-describedby="Insert your password" placeholder="Insert your password" @bind-value="user.password" />
			<ValidationMessage For="@(() => user.password)" />
		</div>
		<div class="form-group mt-2">
			<label for="password">Confirm your password</label>
			<input type="password" class="form-control" id="passwordInpuAgaint" aria-describedby="Confirm your password" placeholder="Confirm your password" @bind-value="user.passwordAgain" />
			<ValidationMessage For="@(() => user.passwordAgain)" />
		</div>
		<div class="col text-center mt-3">
			<button type="submit" class="btn btn-outline-primary">Register</button>
		</div>
	</EditForm>
	<div class="col text-center mt-3">
		<button type="button" class="btn btn-outline-secondary" @onclick="NavigateToLogin">Back</button>
	</div>
</div>


@code {
	private ServicePassword.BlazorWebAssembly.Models.UserObject user = new();

	public async Task Send(object? param)
	{
		try
		{
			var fbAuthLink = await _fireBaseAuthProvider.CreateUserWithEmailAndPasswordAsync(user.email, user.password, user.username);
			if (fbAuthLink != null)
			{
				Console.WriteLine(fbAuthLink.FirebaseToken.ToString());
				await _fireBaseAuthProvider.SendEmailVerificationAsync(fbAuthLink.FirebaseToken);
				await Alert("You have successfully regitered!");
				await Task.Delay(500);
				NavigationManager.NavigateTo("/", forceLoad: true);
			}
			else
			{
				await Alert("There was problem with registration! \n Try Again");
				await Task.Delay(500);
				NavigationManager.NavigateTo("/registration", forceLoad: true);
			}
		}
		catch (Exception)
		{
			await Alert("Server problem! \n Try Again");
			await Task.Delay(500);
			NavigationManager.NavigateTo("/registration", forceLoad: true);
			throw;
		}
	}
	public void NavigateToLogin()
	{
		NavigationManager.NavigateTo("/");
	}

	private async Task Alert(string message)
	{
		await _jsRuntime.InvokeVoidAsync("alert", message);
	}
}